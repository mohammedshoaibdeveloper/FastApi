##################### Fast Api ###############################################


step1:

create directory

step2:

create virtualenvironment and activate

step3:

install:

pip install fastapi uvicorn

step4:

create main.py file

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello, World!"}


step5:

run command to start the development server

uvicorn main:app --reload

step6:

open postman and hit the url:

http://localhost:8000/

############################ CRUD #########################

article link:

https://betterprogramming.pub/my-first-crud-app-with-fast-api-74ac190d2dcc



creating curd:

step1:

pip install fastapi

step2:

create main.py


#main.py
from fastapi import FastAPI
app = FastAPI()
@app.get("/")
def getItems():
    return ['Item 1', 'Item 2', 'Item 3']


step3:

pip install uvicorn


step4:

start server:

uvicorn main:app --reload

step5:

using Swagger UI:


http://127.0.0.1:8000/docs#


step6:

################# get #####################

get data through id

@app.get("/{id}")
def getItem(id:int):
    return fakeDatabase[id]


step7:

################# post #####################

add data:

#Option # 1
@app.post("/")
def addItem(task:str):
    newId = len(fakeDatabase.keys()) + 1
    fakeDatabase[newId] = {"task":task}
    return fakeDatabase


step8:

if add the keys in dictonart:

like this:

addItem(“task”:str, “priority”:”str”, “rank”:int, ..........)


step9:

install:

pip install pydantic

step10:

Create schemas.py file

from pydantic import BaseModel
class Item(BaseModel):
    task: str

################# post #####################

from fastapi import FastAPI
import schemas
…………
#Option # 2
@app.post("/")
def addItem(item:schemas.Item):
    newId = len(fakeDatabase.keys()) + 1
    fakeDatabase[newId] = {"task":item.task}
    return fakeDatabase

modify the body:


################# post #####################

import

from fastapi import FastAPI, Body

#Option #3
@app.post("/")
def addItem(body = Body()):
   newId = len(fakeDatabase.keys()) + 1
   fakeDatabase[newId] = {"task":body['task']}
   return fakeDatabase

################# put #####################

@app.put("/{id}")
def updateItem(id:int, item:schemas.Item):
    fakeDatabase[id]['task'] = item.task 
    return fakeDatabase

################# delete #####################

@app.delete("/{id}")
def deleteItem(id:int):
    del fakeDatabase[id]
    return fakeDatabase


############################## Database and Models ##############################

step1:

install 

pip install sqlalchemy

step2:

create database.py

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
#Create sqlite engine instance
engine = create_engine("sqlite:///todo.db")
#Create declaritive base meta instance
Base = declarative_base()
#Create session local class for session maker
SessionLocal = sessionmaker(bind=engine, expire_on_commit=False)


step3:

create models.py


from sqlalchemy import Column, Integer, String
from database import Base
class Item(Base):
    __tablename__ = 'items'
    id = Column(Integer, primary_key=True)
    task = Column(String(256))


add into main.py

#main.py
from fastapi import FastAPI,Body, Depends
import schemas
import models
from database import Base, engine, SessionLocal
from sqlalchemy.orm import Session
#This will create our database if it doesent already exists
Base.metadata.create_all(engine)
def get_session():
    session = SessionLocal()
    try:
        yield session
    finally:
        session.close()



################# get #####################

@app.get("/")
def getItems(session: Session = Depends(get_session)):
    items = session.query(models.Item).all()
    return items


################# post #####################

@app.post("/")
def addItem(item:schemas.Item, session = Depends(get_session)):
    item = models.Item(task = item.task)
    session.add(item)
    session.commit()
    session.refresh(item)
    return item

################# get id #####################

@app.get("/{id}")
def getItem(id:int, session: Session = Depends(get_session)):
    item = session.query(models.Item).get(id)
    return item

################# put #####################

@app.put("/{id}")
def updateItem(id:int, item:schemas.Item, session = Depends(get_session)):
    itemObject = session.query(models.Item).get(id)
    itemObject.task = item.task
    session.commit()
    return itemObject


################# delete #####################

@app.delete("/{id}")
def deleteItem(id:int, session = Depends(get_session)):
    itemObject = session.query(models.Item).get(id)
    session.delete(itemObject)
    session.commit()
    session.close()
    return 'Item was deleted'